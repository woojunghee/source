//----------------------------------------------------------------------------
// Title : Command Checker for the Example Design
// Project : JESD204
//----------------------------------------------------------------------------
// File : jesd204c_cmd_chk.v
//----------------------------------------------------------------------------
//
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
//
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
//
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES.
//
//----------------------------------------------------------------------------

`timescale 1ns / 1ps

module jesd204c_cmd_chk (
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 clk CLK" *)
  (* X_INTERFACE_PARAMETER = "ASSOCIATED_RESET rst_n" *)
  input         clk,
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 rst_n RST" *)
  (* X_INTERFACE_PARAMETER = "POLARITY ACTIVE_LOW" *)
  input         rst_n,
  input         rx_clear,

  input   [5:0] lane_ena,

  input  [191:0] rx_cmd_tdata,
  output        rx_cmd_tready,
  input   [5:0] rx_cmd_tuser,
  input	        rx_cmd_tvalid,

  input   [1:0] meta_mode,

  output        check_valid,
  output        pass,
  output        err
);

localparam   CRC12_mode = 2'h0;
localparam    CRC3_mode = 2'h1;
localparam     CMD_mode = 2'h2;
localparam     FEC_mode = 2'h3;

reg  [31:0] rx_cmd_tdata0_reg;
reg  [31:0] rx_cmd_tdata1_reg;
reg  [31:0] rx_cmd_tdata2_reg;
reg  [31:0] rx_cmd_tdata3_reg;
reg  [31:0] rx_cmd_tdata4_reg;
reg  [31:0] rx_cmd_tdata5_reg;

reg  [31:0] rx_cmd_tdata0_expected;
reg  [31:0] rx_cmd_tdata1_expected;
reg  [31:0] rx_cmd_tdata2_expected;
reg  [31:0] rx_cmd_tdata3_expected;
reg  [31:0] rx_cmd_tdata4_expected;
reg  [31:0] rx_cmd_tdata5_expected;

reg   [5:0] fail_chk;
reg         fail_reg;
reg         check_valid_reg;
reg         pass_reg;

always @(posedge clk)
begin
  if (!rst_n | rx_clear)
  begin
    rx_cmd_tdata0_reg <= 0;
    rx_cmd_tdata1_reg <= 0;
    rx_cmd_tdata2_reg <= 0;
    rx_cmd_tdata3_reg <= 0;
    rx_cmd_tdata4_reg <= 0;
    rx_cmd_tdata5_reg <= 0;
  end
  else
  begin
    if (rx_cmd_tvalid)
	begin
      rx_cmd_tdata0_reg <= rx_cmd_tdata[31:0];
      rx_cmd_tdata1_reg <= rx_cmd_tdata[63:32];
      rx_cmd_tdata2_reg <= rx_cmd_tdata[95:64];
      rx_cmd_tdata3_reg <= rx_cmd_tdata[127:96];
      rx_cmd_tdata4_reg <= rx_cmd_tdata[159:128];
      rx_cmd_tdata5_reg <= rx_cmd_tdata[191:160];
    end
  end
end

//The expected values are generated by adding one to the stored value on each clock cycle after the first one is captured.
//The first one is captured when tvalid is first asserted. The first value is unknown due to the time required to start the rx module.
always @(posedge clk)
begin
  if (!rst_n | rx_clear)
  begin
    rx_cmd_tdata0_expected <= 0;
    rx_cmd_tdata1_expected <= 0;
    rx_cmd_tdata2_expected <= 0;
    rx_cmd_tdata3_expected <= 0;
    rx_cmd_tdata4_expected <= 0;
    rx_cmd_tdata5_expected <= 0;
  end
  else
  begin
    if (rx_cmd_tvalid)
	begin
      if (!check_valid_reg)
      begin
        rx_cmd_tdata0_expected <= rx_cmd_tdata[31:0];
        rx_cmd_tdata1_expected <= rx_cmd_tdata[63:32];
        rx_cmd_tdata2_expected <= rx_cmd_tdata[95:64];
        rx_cmd_tdata3_expected <= rx_cmd_tdata[127:96];
        rx_cmd_tdata4_expected <= rx_cmd_tdata[159:128];
        rx_cmd_tdata5_expected <= rx_cmd_tdata[191:160];
      end
      else
      begin
        case(meta_mode)
          CRC12_mode, CRC3_mode :
          begin
            rx_cmd_tdata0_expected <= (rx_cmd_tdata0_expected == 32'h0000007f) ? 32'b0 : rx_cmd_tdata0_expected + 1;
            rx_cmd_tdata1_expected <= (rx_cmd_tdata1_expected == 32'h0000007f) ? 32'b0 : rx_cmd_tdata1_expected + 1;
            rx_cmd_tdata2_expected <= (rx_cmd_tdata2_expected == 32'h0000007f) ? 32'b0 : rx_cmd_tdata2_expected + 1;
            rx_cmd_tdata3_expected <= (rx_cmd_tdata3_expected == 32'h0000007f) ? 32'b0 : rx_cmd_tdata3_expected + 1;
            rx_cmd_tdata4_expected <= (rx_cmd_tdata4_expected == 32'h0000007f) ? 32'b0 : rx_cmd_tdata4_expected + 1;
            rx_cmd_tdata5_expected <= (rx_cmd_tdata5_expected == 32'h0000007f) ? 32'b0 : rx_cmd_tdata5_expected + 1;
          end
          CMD_mode :
          begin
            rx_cmd_tdata0_expected <= (rx_cmd_tdata0_expected == 32'h0007ffff) ? 32'b0 : rx_cmd_tdata0_expected + 1;
            rx_cmd_tdata1_expected <= (rx_cmd_tdata1_expected == 32'h0007ffff) ? 32'b0 : rx_cmd_tdata1_expected + 1;
            rx_cmd_tdata2_expected <= (rx_cmd_tdata2_expected == 32'h0007ffff) ? 32'b0 : rx_cmd_tdata2_expected + 1;
            rx_cmd_tdata3_expected <= (rx_cmd_tdata3_expected == 32'h0007ffff) ? 32'b0 : rx_cmd_tdata3_expected + 1;
            rx_cmd_tdata4_expected <= (rx_cmd_tdata4_expected == 32'h0007ffff) ? 32'b0 : rx_cmd_tdata4_expected + 1;
            rx_cmd_tdata5_expected <= (rx_cmd_tdata5_expected == 32'h0007ffff) ? 32'b0 : rx_cmd_tdata5_expected + 1;
          end
          FEC_mode :
          begin
            rx_cmd_tdata0_expected <= 32'b0;
            rx_cmd_tdata1_expected <= 32'b0;
            rx_cmd_tdata2_expected <= 32'b0;
            rx_cmd_tdata3_expected <= 32'b0;
            rx_cmd_tdata4_expected <= 32'b0;
            rx_cmd_tdata5_expected <= 32'b0;
          end
        endcase
      end
    end
  end
end

//It is not necessary to check the commands in FEC mode (meta_mode = 3).
always @*
begin
  fail_chk[0] <= (meta_mode != FEC_mode) ? (lane_ena[0] && (rx_cmd_tdata0_reg != rx_cmd_tdata0_expected)) : 1'b0;
  fail_chk[1] <= (meta_mode != FEC_mode) ? (lane_ena[1] && (rx_cmd_tdata1_reg != rx_cmd_tdata1_expected)) : 1'b0;
  fail_chk[2] <= (meta_mode != FEC_mode) ? (lane_ena[2] && (rx_cmd_tdata2_reg != rx_cmd_tdata2_expected)) : 1'b0;
  fail_chk[3] <= (meta_mode != FEC_mode) ? (lane_ena[3] && (rx_cmd_tdata3_reg != rx_cmd_tdata3_expected)) : 1'b0;
  fail_chk[4] <= (meta_mode != FEC_mode) ? (lane_ena[4] && (rx_cmd_tdata4_reg != rx_cmd_tdata4_expected)) : 1'b0;
  fail_chk[5] <= (meta_mode != FEC_mode) ? (lane_ena[5] && (rx_cmd_tdata5_reg != rx_cmd_tdata5_expected)) : 1'b0;
end//always

always @(posedge clk)
begin
  if (!rst_n | rx_clear)
  begin
    fail_reg <= 0;
    check_valid_reg <= 1'b0;
    pass_reg <= 1'b0;
  end
  else
  begin
    fail_reg <= |(fail_chk);
    //Pass is only updated after the data is valid. Once an error is detected, it won't be asserted again.
    pass_reg <= (rx_cmd_tvalid & !check_valid_reg) ? 1'b1 : (check_valid_reg & fail_reg)? 1'b0 : pass_reg;
    check_valid_reg <= (rx_cmd_tvalid) ? 1'b1 : check_valid_reg;
  end
end

assign err = fail_reg & check_valid_reg;
assign check_valid = check_valid_reg;
assign pass = (check_valid) ? pass_reg : 0;

endmodule
